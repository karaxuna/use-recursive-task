!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);const r=e=>{const t=[],n=[];let r=null,o=0;const a=e.map(e=>({iterator:e,busy:!1})),i=()=>n.length===e.length,u=async()=>{if(i())return{done:!0,value:n};if(t.length)return{done:!1,value:t.shift()};const e=new Promise((e,o)=>{r=()=>{i()?e({done:!0,value:n}):t.length?e({done:!1,value:t.shift()}):u().then(e,o)}}),l=((e,t)=>{for(let[n,r]of function*(e,t){let n,r,o;for(n=0;n<e.length;n++)o=e[r=(t+n)%e.length],yield[o,r]}(e,t))if(!n.busy&&!n.done)return{item:n,index:r}})(a,o);return l&&(async(e,i)=>{const u=a[e];u.busy=!0;const{done:l,value:f}=await u.iterator.next(i);if(u.busy=!1,l?(n.push(f),u.done=!0):(t.push(f),o=e),r){let e=r;r=null,e()}})(l.index),await e};return{next:u}},o=async function*(e){if(Array.isArray(e))return yield*await function(e){const t=e.map(e=>o(e));return{[Symbol.asyncIterator]:()=>r(t)}}(e);const t=e.fn.apply(e.context,e.args);if((e=>"function"==typeof e.then)(t)){let n;try{n=await t}catch(t){let n;const r=new Promise(e=>{n=e});return yield{context:e,errs:[t],retry:n},await r,yield*await o(e)}return n}if((e=>"function"==typeof e.next&&"function"==typeof e[Symbol.iterator])(t)){let e;for(;;){let{done:n,value:r}=await t.next(e);if(n)return r;const a=o(r);for(;;){const t=await a.next();if(t.done){e=t.value;break}yield t.value}}}},a=e=>new Promise((t,n)=>{setTimeout(()=>{3!==e?t(e):n("hah!")},1e3)}),i=o({fn:function*(){let e;return console.log("0. data:",e),e=yield{fn:a,args:[1]},console.log("1. data:",e),e=yield{fn:a,args:[2]},console.log("2. data:",e),e=yield[{fn:function*(){return yield{fn:a,args:[3]}}},{fn:function*(){return yield{fn:a,args:[4]}}}],console.log("3, 4. data:",e),5}});!async function(){for(;;){const e=await i.next();if(console.log(e),e.done)break;e.value.errs.length&&confirm("err: "+e.value.errs[0].message+", retry?")&&e.value.retry()}}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,